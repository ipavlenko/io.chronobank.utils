#!/usr/bin/env node
require('dotenv').config()
require('../require')

const bitcoin = require('bitcoinjs-lib')
const { chunk } = require('lodash')
const coinselect = require('coinselect/split')
const utxos = requireRoot(process.env.UTXO_PATH)

const DECIMALS = 100000000

const address = process.env.TARGET_ADDRESS
const feeRate = parseInt(process.env.FEE_RATE)
const network = bitcoin.networks[process.env.NETWORK]
const rootSeed = process.env.PRIVATE_KEY
const chunkSize = process.env.CHUNK_SIZE

const keyPair = bitcoin.HDNode.fromSeedHex(rootSeed, network)

const targets = [
  {
    address
  }
]

const validUtxos = []
const invalidUtxos = []

// Check utxos one by one
for (let i = 0; i < utxos.length; i++) {
  const { inputs, outputs } = selectAllCoins([utxos[i]])
  if (!inputs || !outputs) {
    invalidUtxos.push(utxos[i])
  } else {
    validUtxos.push(utxos[i])
  }
}

console.log('Unavailable amount:', total(invalidUtxos))
console.log('Available amount ~:', total(validUtxos))
console.log('-----------------------')

// Aggregate utxos into chunks
const chunks = chunk(validUtxos, chunkSize)
for (let i = 0; i < chunks.length; i++) {
  const chunk = chunks[i]
  const { inputs, outputs } = selectAllCoins(chunk)
  console.log(`RAWTX No ${i + 1}:`)
  console.log(createTx(inputs, outputs))
  console.log('-----------------------')
}

function total (array) {
  return array
    ? array.reduce((target, input) => target + input.value, 0)
    : undefined
}

function selectAllCoins (utxos) {
  // console.log(utxos)
  const { inputs, outputs, fee } = coinselect(utxos.map((output) => ({
    txId: output.prevout_hash,
    vout: output.prevout_n,
    value: parseInt(output.value * DECIMALS)
  })), targets, feeRate)
  return { inputs, outputs, fee }
}

function createTx (inputs, outputs) {
  const txb = new bitcoin.TransactionBuilder(network)

  for (const input of inputs) {
    txb.addInput(input.txId, input.vout)
  }

  for (const output of outputs) {
    txb.addOutput(output.address, output.value)
  }

  for (let i = 0; i < inputs.length; i++) {
    txb.sign(i, keyPair)
  }

  return txb.build().toHex()
}

//
// if (!inputs || !outputs) throw new Error('Bad transaction data')
//
// // Commented code exists in the example but not really
// // required for the unknown reason. Check it.
//
// // const pk = this._wallet.keyPair.getPublicKeyBuffer()
// // const spk = bitcoin.script.pubKey.output.encode(pk)
//
// const txb = new bitcoin.TransactionBuilder(this._network)
// for (const input of inputs) {
//   txb.addInput(input.txId, input.vout)
//   // txb.addInput(input.txId, input.vout, bitcoin.Transaction.DEFAULT_SEQUENCE, spk)
// }
// for (const output of outputs) {
//   if (!output.address) {
//     output.address = this.getAddress()
//   }
//   txb.addOutput(output.address, output.value)
// }
//
// this._signInputs(txb, inputs)
//
// return {
//   tx: txb.build(),
//   fee,
// }
