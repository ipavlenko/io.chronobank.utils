#!/usr/bin/env node
require('dotenv').config()
require('../require')

const bitcoin = require('bitcoinjs-lib')
const { chunk } = require('lodash')
const coinselect = require('coinselect/split')
const bip39 = require('bip39')
const utxos = requireRoot(process.env.UTXO_PATH)
const electrumPrivateKeys = requireRoot(process.env.ELECTRUM_KEYS)

const DECIMALS = 100000000

const address = process.env.TARGET_ADDRESS
const feeRate = parseInt(process.env.FEE_RATE)
const network = bitcoin.networks[process.env.NETWORK]
// const rootSeed = process.env.PRIVATE_KEY
const mnemonic = process.env.MNEMONIC
const chunkSize = process.env.CHUNK_SIZE

console.log(bip39.mnemonicToSeed(mnemonic))

// const keyPair = mnemonic
//   ? bitcoin.HDNode.fromSeedBuffer(bip39.mnemonicToSeed(mnemonic), network)
//   : bitcoin.HDNode.fromSeedHex(rootSeed, network)

const targets = [
  {
    address
  }
]

const validUtxos = []
const invalidUtxos = []

// Check utxos one by one
for (let i = 0; i < utxos.length; i++) {
  const { inputs, outputs } = selectAllCoins([utxos[i]])
  if (!inputs || !outputs) {
    invalidUtxos.push(utxos[i])
  } else {
    validUtxos.push(utxos[i])
  }
}

console.log('Unavailable amount:', total(invalidUtxos))
console.log('Available amount ~:', total(validUtxos))
console.log('-----------------------')

// Aggregate utxos into chunks
const chunks = chunk(validUtxos, chunkSize)
for (let i = 0; i < chunks.length; i++) {
  const chunk = chunks[i]
  const { inputs, outputs, fee } = selectAllCoins(chunk)
  console.log(`RAWTX No ${i + 1} - Total Inputs: ${total(inputs)}, Total Outputs: ${total(outputs)}, Fee: ${fee}:`)
  const rawtx = createTx(inputs, outputs, chunk)
  if (rawtx) {
    console.log(rawtx)
  }
  console.log('-----------------------')
}

function total (array) {
  return array
    ? array.reduce((target, input) => target + input.value, 0)
    : undefined
}

function selectAllCoins (utxos) {
  const { inputs, outputs, fee } = coinselect(utxos.map((output) => ({
    txId: output.prevout_hash,
    vout: output.prevout_n,
    value: parseInt(output.value * DECIMALS)
  })), targets, feeRate)
  return { inputs, outputs, fee }
}

function createTx (inputs, outputs, utxos) {
  try {
    const txb = new bitcoin.TransactionBuilder(network)

    for (const input of inputs) {
      txb.addInput(input.txId, input.vout)
    }

    for (const output of outputs) {
      txb.addOutput(output.address, output.value)
    }

    for (let i = 0; i < inputs.length; i++) {
      const address = utxos[i].address
      const keyPair = bitcoin.ECPair.fromWIF(electrumPrivateKeys[address], network)
      txb.sign(i, keyPair)
    }

    return txb.build().toHex()
  } catch (e) {
    console.log('FAILURE! Check your settings in .env file', e.message)
  }
}
